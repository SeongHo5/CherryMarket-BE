plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.graalvm.buildtools.native' version '0.9.28'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id("com.epages.restdocs-api-spec") version "0.19.0"
    id "org.sonarqube" version "4.4.1.3373"
    id 'jacoco'
}

group = 'com.cherrydev'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

// jacoco라는 분석 도구로 테스트 커버리지를 측정하기 위한 플러그인입니다.
jacoco {
    toolVersion = "0.8.8"
}

jacocoTestReport {
    // Gradle의 테스트가 끝난 뒤에만 실행되도록 구성한 것이고, html / xml 형식으로 보고서를 출력하도록 설정했습니다.
    dependsOn test
    reports {
        html.required.set(true)
        xml.required.set(true)
    }

}

// 테스트 커버리지 관련해 명시한 패키지에 대해서만 커버리지를 측정하도록 하는 설정입니다.
jacocoTestCoverageVerification {
    violationRules {
        rule {
            includes = ['com.cherrydev.*']
        }
    }
}

// SonarQube라는 정적 코드 분석 도구를 사용하기 위한 설정입니다.
// PR을 올릴 때 자동으로 코드를 분석해주고, https://sonarcloud.io/project/overview?id=devcherry_cherrymarket 에서 결과를 확인할 수 있습니다.
sonar {
    properties {
        property "sonar.projectKey", "devcherry_cherrymarket"
        property "sonar.organization", "devcherry"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

openapi3 {
    server {
        url = 'https://server.marketcherry.store'
        description = 'Production server'
    }
    title = '[Cherry Market] API Docs'
    description = '네이버 클라우드 캠프 3기 프로젝트 Cherry Market의 API Docs입니다.'
    version = '0.0.1-SNAPSHOT'
    format = 'yaml'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
    // SPRING BOOT
    implementation 'org.springframework.boot:spring-boot-starter-web'
    // Spring이 비동기적으로 동작하도록 하는 기능을 제공합니다. 제 기억으로는 현재 저희 프로젝트에는 거의 사용되지 않았습니다.
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    // 각종 보안 관련 기능을 제공합니다. Authentication, UserDetails
    implementation 'org.springframework.boot:spring-boot-starter-security'
    // Validation을 위한 편리한 기능을 제공합니다. @Email, @PresentOrFuture 등
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // SPRING BOOT DEV
    // Spring Boot의 개발을 도와주는 기능을 제공합니다. LiveReload, Property Defaults, Auto-configuration Report 등
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    // LOMBOK
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // SPRING DATA
    runtimeOnly 'com.mysql:mysql-connector-j'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.3'
    // MyBatis의 페이징 처리를 손쉽게 해주는 기능을 제공합니다.
    implementation 'com.github.pagehelper:pagehelper-spring-boot-starter:1.4.6'

    // JSON
    implementation group: 'org.json', name: 'json', version: '20230227'

    // JWT
    compileOnly group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.2'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.2'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.2'

    // MAIL
    // 메일 전송 기능을 제공합니다.
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    // 메일 전송 때 사용되는 HTML 템플릿을 Java 코드로 쉽게 작성 및 관리할 수 있도록 도와주는 기능을 제공합니다.
    implementation 'com.j2html:j2html:1.4.0'

    // AWS-SDK-S3
    // AWS-SDK이지만, 네이버 Object Storage를 사용하기 위해 사용했습니다.
    implementation 'io.awspring.cloud:spring-cloud-starter-aws:2.3.1'
    implementation 'com.amazonaws:aws-java-sdk-s3:1.12.112'

    // GOOGLE API
    // 구글 로그인을 위해 추가했지만, 네이버 / 카카오 로그인을 사용하게 되면서 사용하지 않게 되었습니다.
    implementation 'com.google.api-client:google-api-client:1.31.5'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    // TEST
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter-test:3.0.3'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'com.redis:testcontainers-redis:2.0.1'
    testImplementation 'org.testcontainers:junit-jupiter:1.16.0'
    testImplementation("org.junit.platform:junit-platform-launcher:1.5.2")
    testImplementation("org.junit.jupiter:junit-jupiter:5.5.2")
    testImplementation 'org.projectlombok:lombok'
    testImplementation 'org.assertj:assertj-core:3.19.0'

    // API DOCS
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.19.0'
    implementation 'org.springdoc:springdoc-openapi-ui:1.7.0'
}


// For Test Coverage Report with Jacoco
// test라는 Gradle의 일반적인 task를 재구성해 테스트 종료 시 jacocoTestReport라는 task를 실행하도록 한 구성입니다.
tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
    finalizedBy('jacocoTestReport')
}

tasks.named('asciidoctor') {
    inputs.dir snippetsDir
    dependsOn test
}

// For Swagger UI
tasks.register('copyOasToSwagger', Copy) {
    delete 'src/main/resources/static/swagger-ui/openapi3.yaml'
    from "$buildDir/api-spec/openapi3.yaml"
    into 'src/main/resources/static/swagger-ui/'
    dependsOn 'openapi3'
}

